import React, { useEffect, useMemo, useState } from 'react';
import {
  View, Text, TextInput, TouchableOpacity, StyleSheet, Alert,
  ActivityIndicator, ScrollView, KeyboardAvoidingView, Platform, Switch
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import api from '../services/api';
import { getDemo, setDemo } from '../services/flags';

type DrillType = '3PT' | 'FT' | '2PT' | 'LAYUP';

const ORANGE = '#FF6600', CARD = '#111', BORDER = '#2a2a2a', MUTED = '#9a9a9a', WHITE = '#fff';

function formatMs(ms: number) {
  if (!Number.isFinite(ms) || ms < 0) return '0:00.000';
  const hours = Math.floor(ms / 3600000);
  ms %= 3600000;
  const mins = Math.floor(ms / 60000);
  ms %= 60000;
  const secs = Math.floor(ms / 1000);
  const msec = Math.floor(ms % 1000);
  const pad2 = (n: number) => n.toString().padStart(2, '0');
  const pad3 = (n: number) => n.toString().padStart(3, '0');
  return hours > 0
    ? `${hours}:${pad2(mins)}:${pad2(secs)}.${pad3(msec)}`
    : `${mins}:${pad2(secs)}.${pad3(msec)}`;
}

function parseTimeInput(input: string): number {
  const s = input.trim();
  if (/^\d+$/.test(s)) return Number(s); // pure ms
  const mmss = /^(\d+):([0-5]?\d)(?:\.(\d{1,3}))?$/.exec(s);
  if (mmss) {
    const mm = Number(mmss[1]);
    const ss = Number(mmss[2]);
    const ms = Number((mmss[3] || '0').padEnd(3, '0'));
    return mm * 60000 + ss * 1000 + ms;
  }
  const ssms = /^(\d+)(?:\.(\d{1,3}))?$/.exec(s);
  if (ssms) {
    const ss = Number(ssms[1]);
    const ms = Number((ssms[2] || '0').padEnd(3, '0'));
    return ss * 1000 + ms;
  }
  return 0;
}

type AdminSection = 'events' | 'submissions' | 'drills' | 'h2h' | 'wallet';

export default function AdminScreen() {
  const [loading, setLoading] = useState(false);
  const [isDemo, setIsDemo] = useState(getDemo());
  const [section, setSection] = useState<AdminSection>('events');

  // Events
  const [events, setEvents] = useState<any[]>([]);
  const [name, setName] = useState('Ball Skill â€“ Demo Event');
  const [feeCents, setFeeCents] = useState('0');
  const [drills, setDrills] = useState<DrillType[]>(['3PT','FT','2PT','LAYUP']);
  const [locationType, setLocationType] = useState<'in_person' | 'online'>('in_person');
  const [eventId, setEventId] = useState<string>('');

  // Drill submission
  const [email, setEmail] = useState('test@ballskill.com');
  const [drillType, setDrillType] = useState<DrillType>('3PT');
  const [made, setMade] = useState('7');
  const [attempts, setAttempts] = useState('10');
  const [timeInput, setTimeInput] = useState('45.000');
  const timeMs = useMemo(() => parseTimeInput(timeInput), [timeInput]);

  // Credits (demo)
  const [creditEmail, setCreditEmail] = useState('test@ballskill.com');
  const [delta, setDelta] = useState('25');

  const [isDeduct, setIsDeduct] = useState(false);
  const [reason, setReason] = useState('manual');
  const [history, setHistory] = useState<any[]>([]);

  // Submissions viewer
  const [subRows, setSubRows] = useState<any[]>([]);

  // Email autocomplete
  const [knownEmails, setKnownEmails] = useState<string[]>([
    'test@ballskill.com','guest@ballskill.com','admin@ballskill.com','demo@ballskill.com','demox@ballskill.com'
  ]);
  const emailSuggestions = useMemo(
    () => knownEmails
      .filter(e => e.toLowerCase().includes((email || '').toLowerCase()) && e !== email)
      .slice(0,5),
    [email, knownEmails]
  );
  const addKnownEmail = (e: string) => {
    if (!e) return;
    setKnownEmails(prev => prev.includes(e) ? prev : [e, ...prev].slice(0,50));
  };

  const toggleDrill = (d: DrillType) => {
    setDrills(prev => prev.includes(d) ? prev.filter(x => x !== d) : [...prev, d]);
  };

  const loadEvents = async () => {
    setLoading(true);
    try {
      const res = await api.getEvents();
      const list = res.events || [];
      setEvents(list);
      if (!eventId && list.length) setEventId(list[0].id);
    } catch (e:any) {
      Alert.alert('Error', e.message);
    } finally {
      setLoading(false);
    }
  };

  const loadSubmissions = async () => {
    if (!eventId) return;
    setLoading(true);
    try {
      const res = await api.makeRequest(`/events/${eventId}/submissions`);
      setSubRows(res.submissions || []);
    } catch (e:any) {
      Alert.alert('Error', e.message || 'Failed to load submissions');
    } finally {
      setLoading(false);
    }
  };

  const createEvent = async () => {
    setLoading(true);
    try {
      const res = await api.createEvent({
        name,
        feeCents: Number(feeCents) || 0,
        drillsEnabled: drills,
        locationType,
        dateISO: new Date().toISOString(),
      });
      Alert.alert('Created', res.event?.name || 'Event created');
      await loadEvents();
      await loadSubmissions();
    } catch (e:any) {
      Alert.alert('Error', e.message);
    } finally {
      setLoading(false);
    }
  };

  const submitResult = async () => {
    if (!eventId) return Alert.alert('Pick event', 'Select an event first.');
    setLoading(true);
    try {
      await api.submitResult(eventId, {
        email,
        drillType,
        made: Number(made) || 0,
        attempts: Number(attempts) || 0,
        timeMs: timeMs || 0,
      });
      addKnownEmail(email);
      Alert.alert('Saved', `Drill recorded. Time = ${formatMs(timeMs)}`);
      await loadSubmissions(); // auto-refresh list
    } catch (e:any) {
      Alert.alert('Error', e.message);
    } finally {
      setLoading(false);
    }
  };

const grantCredits = async () => {
  setLoading(true);
  try {
    const n = Number(delta);
    if (!Number.isFinite(n)) throw new Error('Amount must be a number');
    const signedDelta = isDeduct ? -Math.abs(n) : Math.abs(n);

    const res = await api.grantCredits(creditEmail, signedDelta);
    addKnownEmail(creditEmail);

    // local history (client-only, for demo)
    setHistory(prev => [
      { email: creditEmail, delta: signedDelta, reason: reason || 'manual', at: Date.now(), balance: res.balance },
      ...prev,
    ].slice(0, 50));

    Alert.alert('Credits Updated', `New balance: ${res.balance}`);
    // notify Earnings to refresh if same user
    try {
      const { emit } = await import('../services/bus');
      emit('wallet:update', { email: creditEmail });
    } catch {}
  } catch (e:any) {
    Alert.alert('Error', e.message);
  } finally {
    setLoading(false);
  }
};

  const seedDemoData = async () => {
    if (!eventId) return Alert.alert('Pick event', 'Select an event first.');
    setLoading(true);
    try {
      const users = ['test@ballskill.com','guest@ballskill.com','demo@ballskill.com','demox@ballskill.com'];
      const seed = [
        { email: users[0], drillType: '3PT',   made: 7, attempts: 10, timeMs: 42000 },
        { email: users[0], drillType: 'FT',    made: 8, attempts: 10, timeMs: 35000 },
        { email: users[1], drillType: '3PT',   made: 6, attempts: 10, timeMs: 44000 },
        { email: users[1], drillType: 'FT',    made: 8, attempts: 10, timeMs: 36000 },
        { email: users[2], drillType: '2PT',   made: 7, attempts: 10, timeMs: 39000 },
        { email: users[3], drillType: 'LAYUP', made: 9, attempts: 10, timeMs: 30000 },
      ];
      for (const r of seed) {
        await api.submitResult(eventId, r);
        addKnownEmail(r.email);
      }
      Alert.alert('Seeded', 'Added sample results.');
      await loadSubmissions();
    } catch (e:any) {
      Alert.alert('Error', e.message || 'Seed failed');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => { loadEvents(); }, []);
  useEffect(() => { if (eventId) loadSubmissions(); }, [eventId]);

  const onToggleDemo = (v: boolean) => {
    setDemo(v);
    setIsDemo(v);
  };

  return (
    <KeyboardAvoidingView style={{ flex:1, backgroundColor:'#000' }} behavior={Platform.OS === 'ios' ? 'padding' : undefined}>
      <ScrollView contentContainerStyle={{ padding:16, paddingBottom:96 }}>
        {/* Header + Demo toggle */}
        <View style={{ flexDirection:'row', alignItems:'center', justifyContent:'space-between' }}>
          <Text style={s.h1}>Admin</Text>
          <View style={{ flexDirection:'row', alignItems:'center' }}>
            <Text style={{ color: MUTED, marginRight: 8 }}>Demo Mode</Text>
            <Switch value={isDemo} onValueChange={onToggleDemo} />
          </View>
        </View>
        <Text style={s.sub}>Create events, seed data, record drills, grant credits.</Text>

        {/* Admin sub-tabs */}
        <View style={{ flexDirection:'row', marginTop: 10, marginBottom: 12, flexWrap:'wrap' }}>
          {([
            { key:'events',      label:'Events',      icon:'calendar'            },
            { key:'submissions', label:'Submissions', icon:'list'                },
            { key:'drills',      label:'Enter Drill', icon:'create'              },
            { key:'h2h',         label:'H2H',         icon:'git-compare-outline' },
            { key:'wallet',      label:'Credits',     icon:'wallet'              },
          ] as {key:AdminSection;label:string;icon:any}[]).map(t => {
            const on = section === t.key;
            return (
              <TouchableOpacity key={t.key} onPress={() => setSection(t.key as AdminSection)}
                style={[s.pill, on && s.pillOn, { marginRight:8, marginTop:8, flexDirection:'row', alignItems:'center' }]}>
                <Ionicons name={t.icon} size={14} color={on ? '#fff' : '#9a9a9a'} style={{ marginRight:6 }} />
                <Text style={[s.pillText, on && s.pillTextOn]}>{t.label}</Text>
              </TouchableOpacity>
            );
          })}
        </View>

        {/* EVENTS SECTION */}
        {section === 'events' && (
          <>
            {/* Create Event */}
            <View style={s.card}>
              <Text style={s.cardTitle}>Create Event</Text>

              <Text style={s.fieldLabel}>Name</Text>
              <TextInput style={s.input} value={name} onChangeText={setName} />

              <Text style={s.fieldLabel}>Fee (cents)</Text>
              <TextInput style={s.input} value={feeCents} onChangeText={setFeeCents} keyboardType="numeric" />

              <Text style={s.fieldLabel}>Drills</Text>
              <View style={s.row}>
                {(['3PT','FT','2PT','LAYUP'] as DrillType[]).map(d => (
                  <TouchableOpacity key={d} style={[s.pill, drills.includes(d) && s.pillOn]} onPress={() => toggleDrill(d)}>
                    <Text style={[s.pillText, drills.includes(d) && s.pillTextOn]}>{d}</Text>
                  </TouchableOpacity>
                ))}
              </View>

              <Text style={[s.fieldLabel, { marginTop: 8 }]}>Event Type</Text>
              <View style={[s.row, { marginTop: 6 }]}>
                <TouchableOpacity
                  style={[s.pill, locationType === 'in_person' && s.pillOn]}
                  onPress={() => setLocationType('in_person')}
                >
                  <Text style={[s.pillText, locationType === 'in_person' && s.pillTextOn]}>In-Person</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[s.pill, locationType === 'online' && s.pillOn]}
                  onPress={() => setLocationType('online')}
                >
                  <Text style={[s.pillText, locationType === 'online' && s.pillTextOn]}>Online</Text>
                </TouchableOpacity>
              </View>

              <TouchableOpacity style={[s.btn, loading && s.btnDisabled]} onPress={createEvent} disabled={loading}>
                <Text style={s.btnText}>{loading ? 'Workingâ€¦' : 'Create Event'}</Text>
              </TouchableOpacity>
            </View>

            {/* Event List / Select */}
            <View style={s.card}>
              <Text style={s.cardTitle}>Events</Text>
              {loading && <ActivityIndicator color={ORANGE} />}
              {(events || []).map(ev => (
                <TouchableOpacity key={ev.id} style={[s.eventItem, ev.id===eventId && s.eventItemActive]} onPress={() => setEventId(ev.id)}>
                  <Text style={s.eventTitle}>{ev.name}</Text>
                  <Text style={s.eventMeta}>
                    {new Date(ev.dateISO).toLocaleString()} â€¢ Type: {ev.locationType === 'in_person' ? 'In-Person' : 'Online'}
                  </Text>
                </TouchableOpacity>
              ))}
              {!events?.length && <Text style={s.eventMeta}>No events yet.</Text>}

              {isDemo && (
                <TouchableOpacity style={[s.btn, { marginTop: 10 }]} onPress={seedDemoData} disabled={!eventId || loading}>
                  <Text style={s.btnText}>Seed Demo Data (test, guest, demo, demox)</Text>
                </TouchableOpacity>
              )}
              <TouchableOpacity style={[s.btn, { marginTop: 10 }]} onPress={loadSubmissions} disabled={!eventId || loading}>
                <Text style={s.btnText}>Refresh Submissions</Text>
              </TouchableOpacity>
            </View>
          </>
        )}

        {/* DRILLS SECTION */}
        {section === 'drills' && (
          <>
            {/* Drill Submission */}
            <View style={s.card}>
              <Text style={s.cardTitle}>Enter Drill Result</Text>
              <Text style={s.fieldLabel}>Player Email</Text>
              <TextInput
                style={s.input}
                value={email}
                onChangeText={setEmail}
                autoCapitalize="none"
                keyboardType="email-address"
                placeholder="player@example.com"
                placeholderTextColor="#666"
              />
              {!!emailSuggestions.length && (
                <View style={{ marginTop: 6, flexDirection:'row', flexWrap:'wrap' }}>
                  {emailSuggestions.map(sug => (
                    <TouchableOpacity key={sug} onPress={() => setEmail(sug)} style={[s.pill, { marginRight: 8, marginTop: 8 }]}>
                      <Text style={s.pillText}>{sug}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              )}

              <Text style={s.fieldLabel}>Drill</Text>
              <View style={s.row}>
                {(['3PT','FT','2PT','LAYUP'] as DrillType[]).map(d => (
                  <TouchableOpacity key={d} style={[s.pill, drillType === d && s.pillOn]} onPress={() => setDrillType(d)}>
                    <Text style={[s.pillText, drillType === d && s.pillTextOn]}>{d}</Text>
                  </TouchableOpacity>
                ))}
              </View>

              <Text style={s.fieldLabel}>Made</Text>
              <TextInput style={s.input} value={made} onChangeText={setMade} keyboardType="numeric" />
              <Text style={s.fieldLabel}>Attempts</Text>
              <TextInput style={s.input} value={attempts} onChangeText={setAttempts} keyboardType="numeric" />

              <Text style={s.fieldLabel}>Time</Text>
              <TextInput
                style={s.input}
                value={timeInput}
                onChangeText={setTimeInput}
                placeholder="mm:ss.mmm or ss.mmm or ms"
                placeholderTextColor="#666"
                keyboardType="numbers-and-punctuation"
              />
              <Text style={{ color: MUTED, marginTop: 4 }}>Parsed = {formatMs(timeMs)}</Text>

              <TouchableOpacity style={[s.btn, { marginTop: 10 }]} onPress={submitResult} disabled={!eventId || loading}>
                <Text style={s.btnText}>Save Result</Text>
              </TouchableOpacity>
            </View>
          </>
        )}

        {/* SUBMISSIONS SECTION */}
        {section === 'submissions' && (
          <>
            <View style={s.card}>
              <Text style={s.cardTitle}>Submissions ({subRows.length})</Text>
              {!subRows.length && <Text style={s.eventMeta}>No results yet.</Text>}
              {subRows.map((r, idx) => (
                <View key={idx} style={s.lbRow}>
                  <Text style={[s.lbCell, { flex: 0.9 }]} numberOfLines={1}>{r.email}</Text>
                  <Text style={[s.lbCell, { width: 54 }]}>{r.drillType}</Text>
                  <Text style={[s.lbCell, { width: 70 }]}>{r.made}/{r.attempts}</Text>
                  <Text style={[s.lbCell, { width: 100 }]}>{formatMs(r.timeMs)}</Text>
                </View>
              ))}
            </View>
          </>
        )}

        {/* H2H SECTION */}
        {section === 'h2h' && (
          <>
            <View style={s.card}>
              <Text style={s.cardTitle}>Head-to-Head Compare</Text>

              <Text style={s.fieldLabel}>Player A Email</Text>
              <TextInput
                style={s.input}
                value={email}
                onChangeText={setEmail}
                autoCapitalize="none"
                keyboardType="email-address"
                placeholder="playerA@example.com"
                placeholderTextColor="#666"
              />
              {!!emailSuggestions.length && (
                <View style={{ marginTop: 6, flexDirection:'row', flexWrap:'wrap' }}>
                  {emailSuggestions.map(sug => (
                    <TouchableOpacity key={sug} onPress={() => setEmail(sug)} style={[s.pill, { marginRight: 8, marginTop: 8 }]}>
                      <Text style={s.pillText}>{sug}</Text>
                    </TouchableOpacity>
                  ))}
                </View>
              )}

              <Text style={s.fieldLabel}>Player B Email</Text>
              <TextInput
                style={s.input}
                value={creditEmail}
                onChangeText={setCreditEmail}
                autoCapitalize="none"
                keyboardType="email-address"
                placeholder="playerB@example.com"
                placeholderTextColor="#666"
              />
              {knownEmails.filter(e => e !== email).slice(0,5).map(sug => (
                <TouchableOpacity key={sug} onPress={() => setCreditEmail(sug)} style={[s.pill, { marginRight: 8, marginTop: 8 }]}>
                  <Text style={s.pillText}>{sug}</Text>
                </TouchableOpacity>
              ))}

              <Text style={[s.fieldLabel, { marginTop: 8 }]}>Drills to Compare</Text>
              <View style={s.row}>
                {(['3PT','FT','2PT','LAYUP'] as DrillType[]).map(d => (
                  <TouchableOpacity key={d} style={[s.pill, drills.includes(d) && s.pillOn]} onPress={() => toggleDrill(d)}>
                    <Text style={[s.pillText, drills.includes(d) && s.pillTextOn]}>{d}</Text>
                  </TouchableOpacity>
                ))}
              </View>

              <TouchableOpacity
                style={[s.btn, { marginTop: 10 }]}
                disabled={!eventId || !email || !creditEmail || !drills.length || loading}
                onPress={async () => {
                  if (!eventId) return Alert.alert('Pick event', 'Select an event first.');
                  try {
                    setLoading(true);
                    const res = await api.compareH2H(eventId, { userA: email, userB: creditEmail, drills });
                    const r = res?.result;
                    if (!r) return Alert.alert('Compare', 'No result.');
                    const lines = [
                      `Winner: ${r.winner}`,
                      '',
                      `A made/attempts/time: ${r.userA.totalMade}/${r.userA.totalAttempts}/${formatMs(r.userA.totalTime)}`,
                      `B made/attempts/time: ${r.userB.totalMade}/${r.userB.totalAttempts}/${formatMs(r.userB.totalTime)}`,
                    ];
                    Alert.alert('H2H Result', lines.join('\n'));
                  } catch (e:any) {
                    Alert.alert('Error', e.message || 'Compare failed');
                  } finally {
                    setLoading(false);
                  }
                }}
              >
                <Text style={s.btnText}>Compare A vs B</Text>
              </TouchableOpacity>
            </View>
          </>
        )}

{/* WALLET SECTION */}
{section === 'wallet' && (
  <>
    {isDemo ? (
      <View style={s.card}>
        <Text style={s.cardTitle}>Credits (Demo)</Text>

        {/* Operation: Add vs Deduct */}
        <Text style={s.fieldLabel}>Operation</Text>
        <View style={[s.row, { marginTop: 4 }]}>
          <TouchableOpacity
            style={[s.pill, !isDeduct && s.pillOn]}
            onPress={() => setIsDeduct(false)}
          >
            <Text style={[s.pillText, !isDeduct && s.pillTextOn]}>Add</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={[s.pill, isDeduct && s.pillOn]}
            onPress={() => setIsDeduct(true)}
          >
            <Text style={[s.pillText, isDeduct && s.pillTextOn]}>Deduct</Text>
          </TouchableOpacity>
        </View>

        {/* Target email */}
        <Text style={s.fieldLabel}>Email</Text>
        <TextInput
          style={s.input}
          value={creditEmail}
          onChangeText={setCreditEmail}
          autoCapitalize="none"
          keyboardType="email-address"
          placeholder="player@example.com"
          placeholderTextColor="#666"
        />
        {/* quick-pick using your knownEmails list */}
        <View style={{ flexDirection:'row', flexWrap:'wrap', marginTop: 6 }}>
          {knownEmails.slice(0,5).map(sug => (
            <TouchableOpacity key={sug} onPress={() => setCreditEmail(sug)} style={[s.pill, { marginRight:8, marginTop:8 }]}>
              <Text style={s.pillText}>{sug}</Text>
            </TouchableOpacity>
          ))}
        </View>

        {/* Amount */}
        <Text style={s.fieldLabel}>Amount</Text>
        <TextInput
          style={s.input}
          value={delta}
          onChangeText={setDelta}
          keyboardType="numeric"
          placeholder={isDeduct ? 'e.g. 25 (will deduct)' : 'e.g. 25 (will add)'}
          placeholderTextColor="#666"
        />

        {/* Reason */}
        <Text style={s.fieldLabel}>Reason</Text>
        <TextInput
          style={s.input}
          value={reason}
          onChangeText={setReason}
          placeholder="manual / refund / correction / prize / etc."
          placeholderTextColor="#666"
        />

        <TouchableOpacity style={[s.btn, { marginTop: 10 }]} onPress={grantCredits} disabled={loading || !creditEmail}>
          <Text style={s.btnText}>{loading ? 'Workingâ€¦' : 'Apply'}</Text>
        </TouchableOpacity>
      </View>
    ) : (
      <Text style={[s.eventMeta, { marginTop: 8 }]}>
        Switch Demo Mode on to use demo credits here.
      </Text>
    )}

    {/* Local history (client-side only, resets on reload) */}
    {!!history.length && (
      <View style={s.card}>
        <Text style={s.cardTitle}>Recent Credit Changes</Text>
        {history.map((h, idx) => (
          <View key={idx} style={s.lbRow}>
            <Text style={[s.lbCell, { flex: 1 }]} numberOfLines={1}>{h.email}</Text>
            <Text style={[s.lbCell, { width: 80 }]}>{h.delta > 0 ? `+${h.delta}` : `${h.delta}`}</Text>
            <Text style={[s.lbCell, { flex: 1 }]} numberOfLines={1}>{h.reason}</Text>
            <Text style={[s.lbCell, { width: 120 }]}>{new Date(h.at).toLocaleString()}</Text>
          </View>
        ))}
      </View>
    )}
  </>
)}
      </ScrollView>
    </KeyboardAvoidingView>
  );
}

const s = StyleSheet.create({
  h1: { color: WHITE, fontSize: 22, fontWeight: '800' },
  sub: { color: MUTED, marginTop: 4, marginBottom: 14 },
  card: { backgroundColor: CARD, borderColor: BORDER, borderWidth: 1, borderRadius: 14, padding: 14, marginTop: 12 },
  cardTitle: { color: WHITE, fontWeight: '800', marginBottom: 8, fontSize: 16 },
  btn: { backgroundColor: ORANGE, borderRadius: 12, paddingVertical: 12, alignItems: 'center', marginTop: 8 },
  btnDisabled: { opacity: 0.6 },
  btnText: { color: '#000', fontWeight: '800' },
  fieldLabel: { color: MUTED, marginBottom: 4, marginTop: 8 },
  input: { borderWidth: 1, borderColor: BORDER, borderRadius: 10, paddingHorizontal: 12, paddingVertical: 10, color: WHITE, backgroundColor: '#0c0c0c' },
  eventItem: { paddingVertical: 10, borderTopWidth: 1, borderTopColor: '#242424' },
  eventItemActive: { backgroundColor: '#1a1a1a', borderRadius: 10, paddingHorizontal: 10, marginTop: 8, borderWidth:1, borderColor:'#FF6600' },
  eventTitle: { color: WHITE, fontWeight: '700' },
  eventMeta: { color: MUTED, fontSize: 12 },
  row: { flexDirection: 'row', alignItems: 'center', flexWrap: 'wrap' },
  lbRow: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', paddingVertical: 6, borderTopWidth: 1, borderTopColor: '#1b1b1b' },
  lbCell: { color: WHITE, marginRight: 8 },
  pill: { borderWidth: 1, borderColor: '#2a2a2a', borderRadius: 999, paddingVertical: 8, paddingHorizontal: 14, marginRight: 8, marginTop: 8 },
  pillOn: { backgroundColor: '#0c0c0c', borderColor: '#3a3a3a' },
  pillText: { color: '#9a9a9a', fontWeight: '700' },
  pillTextOn: { color: '#fff' },
});
